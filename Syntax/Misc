Learn syntax of stack using this example code:
class Solution {
public:
    int longestValidParentheses(const std::string& s) {
        int max_length = 0;
        std::stack<int> st;
        st.push(-1);
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else { 
                st.pop();
                if (st.empty()) {
                    st.push(i);
                } else {
                    max_length = std::max(max_length, i - st.top());
                }
            }
        }
        return max_length;
    }
};
This is the solution to the famous longest valid parentheses substring problem.

Learn syntax of Dequeue using this example code:
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> res;
        deque<int> dq;
        for(int i=0;i<n;i++){
            if(!dq.empty() && dq.front()==i-k){
                dq.pop_front(); 
            }
            while(!dq.empty() && nums[dq.back()]<=nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1){
                res.push_back(nums[dq.front()]);
            }
        }
        return res;
    }
};
This is the solution for the famous sliding window maximum problem.
