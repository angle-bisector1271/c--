Learn syntax of stack using this example code:
class Solution {
public:
    int longestValidParentheses(const std::string& s) {
        int max_length = 0;
        std::stack<int> st;
        st.push(-1);
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else { 
                st.pop();
                if (st.empty()) {
                    st.push(i);
                } else {
                    max_length = std::max(max_length, i - st.top());
                }
            }
        }
        return max_length;
    }
};
This is the solution to the famous longest valid parentheses substring problem.

Learn syntax of Dequeue using this example code:
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> res;
        deque<int> dq;
        for(int i=0;i<n;i++){
            if(!dq.empty() && dq.front()==i-k){
                dq.pop_front(); 
            }
            while(!dq.empty() && nums[dq.back()]<=nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1){
                res.push_back(nums[dq.front()]);
            }
        }
        return res;
    }
};
This is the solution for the famous sliding window maximum problem.

Learn different uses of lower_bound and upper_bound through this code:
    // ---------------- VECTOR EXAMPLE ----------------
    vector<int> v = {1, 3, 3, 5, 7, 9}; // must be sorted
    cout << "Vector example:\n";
    auto it_v1 = lower_bound(v.begin(), v.end(), 3);  // first >= 3
    auto it_v2 = upper_bound(v.begin(), v.end(), 3);  // first > 3
    cout << "lower_bound(3) = index " << (it_v1 - v.begin())
         << " value " << *it_v1 << "\n";
    cout << "upper_bound(3) = index " << (it_v2 - v.begin())
         << " value " << *it_v2 << "\n\n";

    // ---------------- SET EXAMPLE ----------------
    set<int> s = {1, 3, 5, 7, 9};
    cout << "Set example:\n";
    auto it_s1 = s.lower_bound(4);  // first >= 4 -> 5
    auto it_s2 = s.upper_bound(5);  // first > 5 -> 7
    if (it_s1 != s.end()) cout << "lower_bound(4) = " << *it_s1 << "\n";
    if (it_s2 != s.end()) cout << "upper_bound(5) = " << *it_s2 << "\n";
    cout << "\n";

    // ---------------- MULTISET EXAMPLE ----------------
    multiset<int> ms = {1, 3, 3, 5, 7, 9};
    cout << "Multiset example:\n";
    auto it_m1 = ms.lower_bound(3);  // first >= 3 (first "3")
    auto it_m2 = ms.upper_bound(3);  // first > 3 (skips all "3"s, points to 5)
    cout << "lower_bound(3) = " << *it_m1 << "\n";
    cout << "upper_bound(3) = " << *it_m2 << "\n";

    // erasing a single element from multiset
    auto it_mErase = ms.find(3); // finds one "3"
    if (it_mErase != ms.end()) ms.erase(it_mErase);
    cout << "After erasing one '3': ";
    for (int x : ms) cout << x << " ";
    cout << "\n";
